version: '3.7'

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./minio-storage:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - gallery-network

  mongo:
    image: 'mongo'
    container_name: 'mongodb'
    environment:
      - MONGO_INITDB_DATABASE=gallery
      - MONGO_INITDB_ROOT_USERNAME=gallery
      - MONGO_INITDB_ROOT_PASSWORD=gallery
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init.mongo.js:ro
      - ./mongo-data:/data/db
    ports:
      - 27017-27019:27017-27019
    networks:
      - gallery-network

  backend:
    platform: linux/amd64
    image: gallery-server
    container_name: gallery-backend
    build:
      target: development # development or production
      context: ./backend
      dockerfile: ./Dockerfile
    entrypoint: ["yarn", "start:dev"]
    env_file:
      - ./backend/.env
    ports: 
      - 3001:3001
      - 3002:9229
    networks:
      - gallery-network
    depends_on:
      - minio
      - mongo
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  frontend:
    image: gallery-client
    container_name: gallery-frontend
    build: 
      context: ./frontend
      dockerfile: ./Dockerfile
    entrypoint: ["yarn", "start"]
    ports: 
      - 3000:3000
    networks:
      - gallery-network
    depends_on:
      - mongo
      - backend
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: gallery-redis
    restart: unless-stopped
    networks:
      - gallery-network
    ports:
      - '6379:6379'
    # command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - ./redis:/data
  
  worker:
    image: gallery-worker
    container_name: worker
    build:
      target: release
      context: ./worker
      dockerfile: ./Dockerfile
    networks:
      - gallery-network
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./worker-tmp:/usr/src/app/files
    env_file:
      - backend/.env
    environment:
      REDIS_URL: 'redis://redis:6379'
      WEB_CONCURRENCY: 3

volumes:
  minio-storage:
  worker:
  redis: 
    driver: local

networks:
  gallery-network:
    driver: bridge